set(git_state_file "${CMAKE_CURRENT_BINARY_DIR}/git.state")
set(git_state_src "${CMAKE_CURRENT_LIST_DIR}/gitstate")

function(WriteGitVersionSrc _filepath)

  ReadGitStatefile(git_sha git_tag git_dirty)

  string(REGEX REPLACE "\\.[^.]*$" "" _filepath_noext ${_filepath})

  execute_process(COMMAND
    cp -u "${git_state_src}.hpp.in" "${_filepath_noext}.hpp" 
    RESULT_VARIABLE res
    ERROR_QUIET)
  if(NOT res EQUAL 0)
    message(FATAL_ERROR "Failed to update ${_filepath_noext}.hpp")
  endif(NOT res EQUAL 0)
  
  configure_file("${git_state_src}.cpp.in" "${_filepath}" @ONLY)

endfunction(WriteGitVersionSrc)


function(ReadGitStatefile hash tag dirty)

  file(STRINGS "${git_state_file}" file_contents)
  list(GET file_contents 1 _hash)
  list(GET file_contents 2 _tag)
  list(GET file_contents 3 _dirty)

  set(${hash} "${_hash}" PARENT_SCOPE)
  set(${tag} "${_tag}" PARENT_SCOPE)
  set(${dirty} "${_dirty}" PARENT_SCOPE)

endfunction(ReadGitStatefile)


function(WriteGitStatefile working_dir)

  GetGitState(${working_dir} hash tag dirty)

  set(info_string "This is a git state file generated by cmake - do not edit")

  set(git_state "${info_string}\n${hash}\n${tag}\n${dirty}\n")

  file(WRITE "${git_state_file}" "${git_state}")

endfunction(WriteGitStatefile)


function(GetGitState _working_dir _hashvar _tagvar _dirty)

  message(STATUS "${_working_dir}")

  set(${_hashvar} "" PARENT_SCOPE)
  set(${_tagvar} "" PARENT_SCOPE)
  set(${_dirty} "false" PARENT_SCOPE)

  if(NOT GIT_FOUND)
    find_package(Git QUIET)
  endif()
  if(NOT GIT_FOUND)
    message(STATUS "Not a git repository but no release version.info")
    set(${_hashvar} "GIT-NOTFOUND")
    return()
  endif()

  execute_process(COMMAND
    "${GIT_EXECUTABLE}" describe --exact-match --tags HEAD
    WORKING_DIRECTORY "${_working_dir}"
    RESULT_VARIABLE res
    OUTPUT_VARIABLE tag
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(res EQUAL 0)
    set(${_tagvar} "${tag}" PARENT_SCOPE)
  endif()

  execute_process(COMMAND
    "${GIT_EXECUTABLE}" rev-parse --verify HEAD
    WORKING_DIRECTORY "${_working_dir}"
    RESULT_VARIABLE res
    OUTPUT_VARIABLE hash
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(res EQUAL 0)
    set(${_hashvar} "${hash}" PARENT_SCOPE)
  else(res EQUAL 0)
    message(WARNING "Error querying git hash:\n${_working_dir}")
  endif(res EQUAL 0)

  execute_process(COMMAND
    "${GIT_EXECUTABLE}" status --porcelain
      WORKING_DIRECTORY "${_working_dir}"
      RESULT_VARIABLE res
      OUTPUT_VARIABLE out
      ERROR_QUIET
      OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(NOT res EQUAL 0)
    message(WARNING "Error querying repo change state")
  endif(NOT res EQUAL 0)
  
  if("${out}" STREQUAL "")
    set(${_dirty} "false" PARENT_SCOPE)
  else("${out}" STREQUAL "")
    set(${_dirty} "true" PARENT_SCOPE)
  endif("${out}" STREQUAL "")

endfunction(GetGitState)
